/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 30.09.2022 04:05:00

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 336;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,105 } };
const TfArray<1, float> quant0_scale = { 1, { 0.1169094443321228, } };
const TfArray<1, int> quant0_zero = { 1, { -94 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int8_t tensor_data1[20*105] = { 
  -36, 9, -70, -15, -12, 16, -28, -21, -58, 3, 24, -64, -59, 4, -18, 20, 17, -38, -1, -64, 38, -55, 19, -39, -18, -29, -44, 26, -35, 7, -33, -24, 25, 35, 29, -7, -3, 0, -8, 6, 51, 46, 31, 9, -42, 4, -1, 11, -31, -6, -3, 5, -44, 0, 0, -19, 4, -16, 3, 11, 9, 29, -3, -19, -2, 4, 40, 17, -8, -23, 48, -104, -31, -15, -12, 51, 39, 52, -11, 14, 20, 8, -15, -2, -22, -11, -38, -12, -22, 9, 23, -44, 2, 13, -10, -4, 2, 13, 9, 34, -43, -14, 30, -2, 23, 
  15, -103, 44, 15, 47, 65, 14, 21, -48, 17, 32, 9, 6, -25, -7, -9, -15, -31, 40, 32, -19, -33, -38, -35, -13, -52, 9, 18, -46, -20, 37, 17, -46, -17, -68, 47, -10, 57, 92, 19, 12, 17, -3, -8, -51, -37, -5, -16, -44, -32, 33, 30, -48, 13, 34, -20, -29, 12, -33, -56, 32, 12, -35, 51, 9, -21, 23, -33, 37, -11, -22, 50, 2, 2, 59, 23, -38, -62, 15, -24, 66, 6, -15, -3, 2, 13, -36, 47, -1, -41, 70, 22, -23, -2, -53, 38, 9, 51, -34, -29, -17, 70, -24, 15, -29, 
  2, -127, 2, 39, 22, 21, -63, -32, -43, -13, -18, 5, -25, -3, 35, -35, -30, -6, 45, -33, 17, -13, -22, 0, -40, 17, 3, -24, -23, -45, -29, 16, -42, 12, -49, 17, 15, 24, 17, -9, 53, -8, -19, -13, -25, 4, 11, -23, 17, -44, 45, -10, 1, -2, 24, 13, 36, -7, 0, 13, 9, -37, -46, 37, 38, -32, -12, 12, 33, 34, 30, 66, 21, 53, -2, 25, -47, -44, -54, -10, 24, -5, -20, 39, 47, 53, -8, 31, -23, 17, 10, 28, -33, 2, 27, 5, 33, 1, 26, 4, -42, 36, 24, -31, 4, 
  -59, -6, -33, 12, 0, 6, -40, -10, -9, 20, -5, -20, 11, 23, 14, -19, -9, 6, 54, 43, -39, -17, 53, 1, 1, 44, 12, -6, 38, 11, 4, 36, 12, -31, 8, 27, 13, 0, -32, 11, 11, -4, -7, 14, -43, -18, 41, -19, 31, 27, 31, -33, -19, 39, -38, -23, 24, -1, 19, -33, -40, -20, -6, 28, -28, 20, -11, -41, -43, 19, 6, -36, 2, -34, 2, -27, -34, 13, -34, 14, 20, -24, -19, 10, 18, 20, 29, -26, 45, -12, 6, -24, -17, 23, 32, -30, -28, -12, 26, 1, -1, -21, -29, 21, 16, 
  1, -86, 28, 57, 39, 47, -61, -46, -5, -10, 12, 28, 10, 5, -20, 5, -14, -7, 25, 25, -8, -26, -15, 0, -31, -40, 38, 12, 25, -30, 4, -46, -33, 14, -51, -10, 16, 53, 20, -1, 34, -33, -43, -14, -53, 1, 17, 24, -1, 5, 28, -38, 7, 14, 26, -14, 40, -53, -3, -4, -29, 6, -25, 7, 63, 7, 12, -13, 15, -33, -17, 50, 24, 30, 28, 17, -2, -23, -22, 46, 4, 41, 43, 6, 42, 12, -5, -4, -21, 41, -4, 37, 24, 1, 31, -6, -16, 31, 51, 21, -29, 20, -24, 23, -33, 
  14, 74, -30, -37, -34, 0, 33, 31, 17, -15, -14, -35, 37, -25, 27, 13, -16, 13, 25, 32, -8, -34, -9, -7, -15, 42, 6, -23, 41, 28, 20, 55, 0, 45, -4, 9, -8, -16, -14, -62, -30, 10, 53, 34, 4, 31, -23, 33, 14, 4, -9, 13, -14, -52, -4, 35, -4, -2, 39, 19, -10, -20, 30, -39, -23, -25, 7, -2, -11, -38, -45, -41, -78, -58, -42, -42, 30, 75, 42, 28, -49, -4, 3, -20, 39, 41, -3, 5, -39, -6, -10, -3, -46, -5, -17, 9, 14, 29, -46, 5, 5, -39, 7, 41, 44, 
  -9, 116, 13, 46, 5, 22, 22, -8, -7, 19, -23, -15, -31, -12, 50, 12, 1, 26, -5, -26, -11, -22, 19, -48, -19, -37, -25, -32, -14, -63, -15, -51, -72, -42, -4, 15, 31, 30, 59, -2, 37, 5, -45, -31, -23, 13, 20, 17, 25, 6, 14, 11, 14, 11, -58, -2, -29, 14, -25, -15, 13, -49, -16, 1, -5, -12, -12, -2, -25, -20, -20, -20, 11, 79, 4, -22, 25, 19, 48, 15, 20, 9, -15, 8, 26, -35, -23, 30, 21, -13, -12, -29, -17, 13, -51, -12, -6, -49, 21, 8, -29, -49, -13, -25, -32, 
  -25, 41, -25, -21, -46, 33, -2, -50, 30, -39, 25, -26, -31, -18, -21, 1, 6, -28, 10, -4, -6, -27, -35, 0, 2, -31, 41, 22, 25, 40, -31, 46, -32, -15, 13, 2, -41, 19, 8, 4, -6, -50, 20, -35, -33, 32, 20, 35, 11, 4, 44, 18, -16, 46, 23, 10, 5, 45, -10, -21, -1, 28, 19, 39, -34, 21, 25, -25, 34, -21, -54, 38, -14, 33, 6, 13, 0, -3, 33, 32, 30, 38, -6, -1, -22, 21, 37, -28, -27, 49, -33, -29, -36, -32, -25, -19, -36, -26, -21, 33, -32, 8, -32, 21, 5, 
  3, 55, 17, -46, 12, 3, -5, -20, 26, -32, -31, 64, 8, -9, -32, -14, 16, -9, 33, 3, -5, -4, -7, -26, -26, 48, -50, -11, 43, -10, -17, 4, -32, 16, 20, -14, -17, -2, -46, -13, 0, -31, -28, 36, 1, 18, 42, 21, -26, 53, -34, -18, 1, -45, -10, 23, -38, 23, 12, 16, 0, 16, -14, 30, 30, 40, -47, 17, 17, -29, 7, -7, -8, 53, -36, 37, 19, 16, 43, 0, -19, -16, 26, -19, 26, 11, 31, 14, 9, -4, 17, -17, -56, -22, 16, 11, -9, -46, 26, -36, 38, 8, 15, -44, -33, 
  -3, -70, 31, 38, -21, 6, -24, -38, 8, -22, -1, 1, -15, 1, 9, -16, 15, 46, 42, -28, 19, -35, -4, 28, 13, -52, -14, -32, 27, 7, -36, 0, -5, -40, -28, 33, 14, 67, 27, 47, -22, -25, 0, 11, -1, -41, 9, -22, -44, 16, -10, 38, -31, 62, 24, -54, -31, -34, 17, -2, -33, -15, 22, -12, 47, 29, 42, -20, 35, 5, 4, 17, 2, 17, 32, 0, 15, 1, 2, -25, 10, -21, -7, 35, -33, 33, -7, -4, 23, 6, -12, 29, 38, -13, -37, -13, 5, -29, -17, -20, -1, 26, 10, -42, -19, 
  -36, -78, -6, -18, 42, -29, 1, -19, 28, 32, 18, 79, 35, 71, 27, -16, -5, 47, 10, 24, -23, 12, 52, -33, -23, 27, -23, 17, 40, -53, 55, -12, -53, 7, 15, -5, -53, 13, -21, -24, -44, -3, 29, 53, 27, 38, -7, 28, -7, -39, 60, 15, -28, 19, 32, -3, -4, 50, -51, 32, -23, -43, 0, -44, -56, -34, 15, 15, -29, -10, -24, 57, -27, -6, 17, -27, -45, -56, 33, 43, 36, 45, -8, -8, -18, 47, 47, 5, 28, 52, 32, -2, 17, 2, 22, -35, 55, 5, 32, 49, -16, -19, 11, 18, -62, 
  26, 103, -1, -38, -37, 14, 37, 43, 62, 72, 13, 45, 14, -12, -6, 40, 17, 28, 36, 34, 40, 5, 13, 26, 47, -4, -4, 43, 5, 50, -29, 33, -24, 1, 50, -60, 32, 12, -22, -71, -62, -6, -27, -24, -10, 9, -23, 18, 39, 37, -1, 16, 40, 19, 45, 1, 30, 50, -26, 37, 2, -20, 51, -9, -15, 31, 28, -18, 19, 23, -53, 9, -19, 27, -47, -7, -19, 35, 3, 3, -34, -23, 14, 23, 14, -5, 48, 41, -26, -20, -25, 22, 10, -42, -6, -25, 2, 19, -17, -38, -10, -43, 31, -20, 17, 
  13, 30, 8, -28, 33, -15, 11, -22, -7, 41, -4, -23, -31, 39, 40, -44, 23, -2, -43, -10, -40, -8, 41, -6, -36, -3, -31, 16, 38, -17, 32, -12, -13, 40, -37, -26, -25, -5, -33, 42, -10, 10, 8, 36, -3, -18, 28, -18, -6, 22, -11, -13, -12, -32, 39, 34, 35, 4, 29, 21, -30, -23, 19, -4, -8, 30, 43, 41, 42, -33, -43, -36, 11, -4, -36, 31, 0, 14, -23, 19, 5, -3, 40, -4, -26, 29, -27, -7, -5, -10, 38, 24, -32, 12, 7, 40, -43, 27, -34, -34, 33, 47, -8, -24, -11, 
  -6, 53, -51, 2, -7, -9, 29, -2, -9, 28, 25, -3, -9, -57, -36, -14, -50, -49, -17, 3, -45, -32, -3, -25, -40, 33, 16, 11, 25, -2, -50, 57, 23, 16, 37, 24, 53, -52, -4, -41, -4, -4, 30, -30, -33, -8, -16, -14, -11, 31, -53, -55, -11, -42, 23, 4, -1, 36, -33, -14, 0, 27, 59, -23, 7, 34, 29, 17, -56, 44, 40, -105, -22, -7, 32, -29, 25, 26, -24, 28, -3, -41, -1, -45, 4, -2, 7, -55, -50, 24, -29, 13, -36, -21, 15, 3, 16, 21, 33, 17, -33, -2, -13, -26, 27, 
  -42, -38, 58, -24, 16, -18, 12, 24, 11, -8, -39, -11, -30, -2, 7, -14, -32, -21, -16, -16, 15, 32, -20, 20, 30, 6, -22, -4, -12, 11, 14, 2, 38, 36, 28, -46, 1, 1, -31, -13, 1, -39, 33, -24, -7, 4, 33, -40, 39, 11, -25, 11, 36, 29, 8, -9, -8, 12, 45, 47, -31, 38, -7, -4, -31, 10, 35, 50, -21, -33, 27, 10, 28, -3, -13, 10, 30, -5, -1, 9, 29, -36, -11, 30, -9, 34, -2, 32, -24, -8, 21, 53, 36, -22, 25, 2, -39, -10, 7, -13, -22, -15, -32, -6, -28, 
  -33, 62, -50, 1, -15, 48, -15, -1, -20, 37, -37, -21, -42, -45, 4, -54, -18, 8, -2, 0, 13, -33, -13, -34, -1, -7, 28, 28, -10, 21, -49, -21, -24, 17, 32, -1, 13, -17, -22, 45, 53, -23, 44, -14, -16, 22, -25, 36, -17, 19, -29, 2, 9, -19, -3, 1, -10, -25, 9, -14, 31, 7, -24, -20, 14, 32, -5, -47, -38, -1, 50, -83, -18, -35, -20, 43, -1, 14, -29, 39, 5, 33, 10, -51, -30, -64, -31, 7, 13, 27, -39, -8, 8, -19, 30, 23, -43, -9, 11, 3, -17, -30, 18, 8, 50, 
  -31, -49, 47, 30, 17, 4, -26, -43, -14, 0, 1, -16, -16, -29, -16, 20, 30, 28, -29, 8, -35, -48, -16, 27, 8, -3, -11, 4, 36, 20, 2, -20, -12, 18, -15, 8, -17, -12, -6, 28, 15, 41, -40, -40, 8, 11, -2, 23, 23, -1, 38, 28, -17, 32, -23, 1, -38, -34, -19, -40, -35, -26, -30, 57, -2, -15, -7, 23, 4, 34, -18, -8, 38, 7, 24, -43, 21, -14, 11, 48, 33, 55, 31, -18, 25, 33, 3, -12, 26, -8, -22, 50, 43, 38, -28, -33, 44, 43, 48, 45, 43, 46, -33, -22, -3, 
  -33, -52, -28, -41, 24, -31, 0, 29, -24, 12, 8, 15, 1, -20, -16, -13, 14, -3, -30, 26, -45, -11, 22, -37, 41, -3, -29, 35, 26, 16, 26, 10, 3, 3, -57, -45, 12, 16, -46, -8, -49, 17, -43, 29, 39, 34, 19, 30, -3, -45, -15, 42, -12, 38, 45, -28, 6, -5, 28, -23, 39, -21, 4, 33, 40, -14, -21, -11, 3, 8, 34, 35, -53, -40, 16, 31, -37, -11, 33, -28, 39, -42, -23, -49, 30, 3, 56, -28, -11, -25, 10, -27, -23, 49, 54, -16, 36, -30, 33, 39, 16, 50, 53, -9, 17, 
  -36, -16, 25, 34, 21, 12, -6, -34, -15, -13, -40, -29, 34, -2, -17, 34, -15, -4, -33, -3, 32, -35, -9, 49, -24, -33, 38, -8, 13, 2, 29, 22, 41, 9, 24, 23, 18, -7, 4, 22, -21, -49, 10, -20, 42, 35, -33, 21, 25, 5, 7, -35, -29, -17, 21, -29, 10, 22, -39, 18, 9, -8, 48, -32, 38, 21, -30, 44, -29, 30, 9, -24, -9, -43, 35, -32, -29, -29, 23, -25, -35, 23, -20, -40, -42, -21, 4, 14, -18, 13, -20, 46, 14, -18, 13, 43, 11, 48, -3, 15, -25, -19, -9, 46, -21, 
  -21, 21, 11, -1, 10, 19, 5, -45, 0, 28, -30, -7, -35, -50, 9, -6, -19, -65, -19, -42, -23, 9, 22, -55, 20, 24, -5, 52, -72, -31, -47, -31, 64, 12, 19, 25, 53, -45, 15, 14, 4, -6, 33, -11, -36, -3, -7, 15, -47, -59, 12, -14, -32, -36, -29, -30, 41, -50, -3, -27, 15, 19, 50, -24, 4, 67, 69, 38, 3, -11, 43, -77, -7, -39, -39, 44, 32, 13, -36, 24, 3, 37, -25, -17, -50, 25, -32, 8, -57, -1, -15, -6, 20, -48, 11, 44, 14, 53, 65, 38, -1, 42, 34, 37, 48, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 20,105 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0047865631058812141, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int32_t tensor_data2[20] = { -88, -163, -162, -45, -150, 180, 341, -89, -91, -118, -29, 147, -26, -124, -56, -13, -109, 72, -59, -203, };
const TfArray<1, int> tensor_dimension2 = { 1, { 20 } };
const TfArray<1, float> quant2_scale = { 1, { 0.00055959442397579551, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[10*20] = { 
  0, 5, 15, 6, 17, -23, -45, 7, -44, -38, -52, -28, 42, 49, -14, 37, -53, 4, -15, 21, 
  -31, 45, 20, 83, 69, 2, 127, -113, 7, -1, 35, -75, -63, -3, -94, -76, 21, -49, -21, -11, 
  -57, 53, 34, -13, 69, -9, -25, -14, 40, 46, 2, -53, 9, -45, 10, -60, 15, 23, -34, -7, 
  -41, -32, -69, -41, -33, 42, -4, 34, 45, -59, 65, 53, -1, -26, -6, 46, 1, 59, 11, -56, 
  30, -2, -32, -40, -69, 50, -64, -5, -22, 45, -8, -29, -42, 24, -4, 57, -1, -33, 43, 21, 
  49, 39, -43, 0, -49, 4, -81, -12, 49, -44, -53, 69, -37, 29, -25, 74, -48, 2, -41, 43, 
  14, 3, 24, 40, 56, -24, -109, 25, 18, 45, -3, -9, -59, -8, -19, -45, 27, -31, 20, -19, 
  -42, 57, -14, -35, 17, -30, -42, -33, 36, 35, 24, -10, -9, -9, -20, -60, -17, -30, -17, 18, 
  -7, 12, -11, 13, 6, -8, -52, -49, -14, -42, -21, 14, 39, 48, -14, 63, -56, 30, -4, 9, 
  -32, 24, 18, 44, -12, 8, -37, -20, 31, -16, -9, -21, -40, -24, -39, -32, 50, 22, -11, 37, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 10,20 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0092019559815526009, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[10] = { 99, 488, 120, 332, 245, 272, -5, -380, -254, -283, };
const TfArray<1, int> tensor_dimension4 = { 1, { 10 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00037057016743347049, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[2*10] = { 
  -40, 26, 25, -104, -13, -61, 40, 42, -8, 25, 
  55, -127, -35, 100, 60, 54, 8, -10, 21, -6, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 2,10 } };
const TfArray<1, float> quant5_scale = { 1, { 0.013114074245095253, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[2] = { 57, -57, };
const TfArray<1, int> tensor_dimension6 = { 1, { 2 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00070703891105949879, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.040270805358886719, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.05391450971364975, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,2 } };
const TfArray<1, float> quant9_scale = { 1, { 0.14676706492900848, } };
const TfArray<1, int> quant9_zero = { 1, { 54 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,2 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,1,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,5,6 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 105, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 2100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
